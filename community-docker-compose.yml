services:
  alfresco:
    image: docker.io/alfresco/alfresco-content-repository-community:23.4.0
    mem_limit: 1900m
    environment:
      JAVA_TOOL_OPTIONS: >-
        -Dencryption.keystore.type=JCEKS
        -Dencryption.cipherAlgorithm=DESede/CBC/PKCS5Padding
        -Dencryption.keyAlgorithm=DESede
        -Dencryption.keystore.location=/usr/local/tomcat/shared/classes/alfresco/extension/keystore/keystore
        -Dmetadata-keystore.password=mp6yc0UD9e
        -Dmetadata-keystore.aliases=metadata
        -Dmetadata-keystore.metadata.password=oKIWzVdEdA
        -Dmetadata-keystore.metadata.algorithm=DESede
      JAVA_OPTS: >-
        -javaagent:/usr/local/tomcat/opentelemetry-javaagent.jar
        -Dotel.resource.attributes=service.name=alfresco-acs
        -Dotel.exporter.otlp.endpoint=http://jaeger:4318
        -Ddb.driver=org.postgresql.Driver
        -Ddb.username=alfresco
        -Ddb.password=alfresco
        -Ddb.url=jdbc:postgresql://postgres:5432/alfresco
        -Dsolr.host=solr6
        -Dsolr.port=8983
        -Dsolr.http.connection.timeout=1000
        -Dsolr.secureComms=secret
        -Dsolr.sharedSecret=secret
        -Dsolr.base.url=/solr
        -Dindex.subsystem.name=solr6
        -Dshare.host=localhost
        -Dshare.port=8080
        -Dalfresco.host=localhost
        -Dalfresco.port=8080
        -Dcsrf.filter.enabled=false
        -Daos.baseUrlOverwrite=http://localhost:8080/alfresco/aos
        -Dmessaging.broker.url="failover:(nio://activemq:61616)?timeout=3000&jms.useCompression=true"
        -Ddeployment.method=DOCKER_COMPOSE
        -DlocalTransform.core-aio.url=http://transform-core-aio:8090/
        -XX:MinRAMPercentage=50
        -XX:MaxRAMPercentage=80
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8080/alfresco/api/-default-/public/alfresco/versions/1/probes/-ready-",
        ]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 1m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alfresco.rule=PathPrefix(`/`)"
      - "traefik.http.services.alfresco.loadbalancer.server.port=8080"
      - "traefik.http.routers.solrapideny.rule=PathRegexp(`^/alfresco/(wc)?s(ervice)?/api/solr/.*$`)"
      - "traefik.http.middlewares.acsfakeauth.basicauth.users=fake:"
      - "traefik.http.routers.solrapideny.middlewares=acsfakeauth@docker"
    volumes:
      - ./docker/alfresco-acs/catalina.policy:/usr/local/tomcat/conf/catalina.policy
      - ./docker/opentelemetry-javaagent.jar:/usr/local/tomcat/opentelemetry-javaagent.jar
  transform-core-aio:
    image: alfresco/alfresco-transform-core-aio:5.1.5
    mem_limit: 1536m
    environment:
      JAVA_OPTS: >-
        -XX:MinRAMPercentage=50
        -XX:MaxRAMPercentage=80
    ports:
      - "8090:8090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/ready"]
      interval: 20s
      timeout: 2s
      retries: 3
      start_period: 10s
    depends_on:
      activemq:
        condition: service_healthy
  share:
    image: docker.io/alfresco/alfresco-share:23.4.0
    mem_limit: 1g
    environment:
      CSRF_FILTER_ORIGIN: http://localhost:8080
      CSRF_FILTER_REFERER: http://localhost:8080/share/.*
      REPO_HOST: "alfresco"
      REPO_PORT: "8080"
      JAVA_OPTS: >-
        -javaagent:/usr/local/tomcat/opentelemetry-javaagent.jar
        -Dotel.resource.attributes=service.name=alfresco-share
        -Dotel.exporter.otlp.endpoint=http://jaeger:4318
        -XX:MinRAMPercentage=50
        -XX:MaxRAMPercentage=80
        -Dalfresco.host=localhost
        -Dalfresco.port=8080
        -Dalfresco.context=alfresco
        -Dalfresco.protocol=http
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/share"]
      interval: 20s
      timeout: 2s
      retries: 3
      start_period: 15s
    depends_on:
      alfresco:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.share.rule=PathPrefix(`/share`)"
      - "traefik.http.services.share.loadbalancer.server.port=8080"
      - "traefik.http.routers.proxiedsolrapideny.rule=PathRegexp(`^/share/proxy/alfresco(-(noauth|feed|api))?/api/solr/`)"
      - "traefik.http.middlewares.sharefakeauth.basicauth.users=fake:"
      - "traefik.http.routers.proxiedsolrapideny.middlewares=sharefakeauth@docker"
    volumes:
      - ./docker/opentelemetry-javaagent.jar:/usr/local/tomcat/opentelemetry-javaagent.jar
  postgres:
    image: postgres:14.4
    mem_limit: 512m
    environment:
      - POSTGRES_PASSWORD=alfresco
      - POSTGRES_USER=alfresco
      - POSTGRES_DB=alfresco
    command: postgres -c max_connections=300 -c log_min_messages=LOG
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
  solr6:
    image: docker.io/alfresco/alfresco-search-services:2.0.13
    mem_limit: 2g
    environment:
      # Solr needs to know how to register itself with Alfresco
      SOLR_ALFRESCO_HOST: "alfresco"
      SOLR_ALFRESCO_PORT: "8080"
      # Alfresco needs to know how to call solr
      SOLR_SOLR_HOST: "solr6"
      SOLR_SOLR_PORT: "8983"
      # Create the default alfresco and archive cores
      SOLR_CREATE_ALFRESCO_DEFAULTS: "alfresco,archive"
      # HTTPS or SECRET
      ALFRESCO_SECURE_COMMS: "secret"
      # SHARED SECRET VALUE
      JAVA_TOOL_OPTIONS: >-
        -Dalfresco.secureComms.secret=secret
      SOLR_OPTS: >-
        -javaagent:/opt/alfresco-search-services/opentelemetry-javaagent.jar
        -Dotel.resource.attributes=service.name=alfresco-solr
        -Dotel.exporter.otlp.endpoint=http://jaeger:4318
    ports:
      - "8083:8983" # Browser port
    volumes:
      - ./docker/opentelemetry-javaagent.jar:/opt/alfresco-search-services/opentelemetry-javaagent.jar
  activemq:
    image: alfresco/alfresco-activemq:5.18-jre17-rockylinux8
    mem_limit: 1g
    ports:
      - "8161:8161" # Web Console
      - "5672:5672" # AMQP
      - "61616:61616" # OpenWire
      - "61613:61613" # STOMP
    healthcheck:
      test:
        [
          "CMD",
          "/opt/activemq/bin/activemq",
          "query",
          "--objname",
          "type=Broker,brokerName=*,service=Health",
          "|",
          "grep",
          "Good",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  content-app:
    image: alfresco/alfresco-content-app:5.2.0
    mem_limit: 128m
    environment:
      APP_BASE_SHARE_URL: "http://localhost:8080/aca/#/preview/s"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 1s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.aca.rule=PathPrefix(`/content-app`)"
      - "traefik.http.middlewares.acaroot.stripprefix.prefixes=/content-app"
      - "traefik.http.middlewares.acaforceslash.redirectregex.regex=^(.*/content-app)$$"
      - "traefik.http.middlewares.acaforceslash.redirectregex.replacement=$${1}/"
      - "traefik.http.middlewares.acachain.chain.middlewares=acaforceslash,acaroot"
      - "traefik.http.routers.aca.middlewares=acachain@docker"
  control-center:
    image: quay.io/alfresco/alfresco-control-center:9.2.0
    mem_limit: 128m
    environment:
      APP_CONFIG_PROVIDER: "ECM"
      APP_CONFIG_AUTH_TYPE: "BASIC"
      BASE_PATH: ./
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 1s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.acc.rule=PathPrefix(`/control-center`) || PathPrefix(`/admin`)"
      - "traefik.http.middlewares.accroot.stripprefix.prefixes=/admin,/control-center"
      - "traefik.http.middlewares.accforceslash.redirectregex.regex=^(.*/(admin|control-center))$$"
      - "traefik.http.middlewares.accforceslash.redirectregex.replacement=$${1}/"
      - "traefik.http.middlewares.accchain.chain.middlewares=accforceslash,accroot"
      - "traefik.http.routers.acc.middlewares=accchain@docker"
  proxy:
    image: traefik:3.1
    mem_limit: 128m
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:8080"
      - "--entryPoints.traefik.address=:8888"
      - "--accesslog=true"
      - "--providers.docker.exposedByDefault=false"
      - "--ping.entrypoint=web"
      - "--ping=true"
      - "--tracing.otlp=true"
      - "--tracing.otlp.http.endpoint=http://jaeger:4318/v1/traces"
    ports:
      - "8080:8080"
      - "8888:8888"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 10s
    security_opt:
      - label=disable # Required for accessing the Docker socket on Selinux enabled systems
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  springboot:
    build: ./demo
    environment:
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB_CLIENT: DEBUG
      ALFRESCO_URL: "http://alfresco:8080/alfresco"
      ALFRESCO_USERNAME: "admin"
      ALFRESCO_PASSWORD: "admin"
      JAVA_OPTS: >-
        -javaagent:/opt/opentelemetry-javaagent.jar
        -Dotel.resource.attributes=service.name=springboot-demo
        -Dotel.exporter.otlp.endpoint=http://jaeger:4318
    volumes:
      - ./docker/opentelemetry-javaagent.jar:/opt/opentelemetry-javaagent.jar
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.springboot.rule=PathPrefix(`/myapp`)"
      - "traefik.http.services.springboot.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.springboot-stripprefix.stripprefix.prefixes=/myapp"
      - "traefik.http.routers.springboot.middlewares=springboot-stripprefix"

  jaeger:
    image: jaegertracing/all-in-one:1.55
    hostname: jaeger
    user: root
    ports:
      - 6831:6831/udp # accept jaeger.thrift in compact Thrift protocol used by most current Jaeger clients
      - 6832:6832/udp # accept jaeger.thrift in binary Thrift protocol used by Node.js Jaeger client (because thriftrw npm package does not support compact protocol)
      - 5775:5775/udp # accept zipkin.thrift in compact Thrift protocol (deprecated; only used by very old Jaeger clients, circa 2016)
      - 5778:5778 # serve configs, sampling strategies
      - 4317:4317 # OpenTelemetry Protocol (OTLP) over gRPC
      - 4318:4318 # OpenTelemetry Protocol (OTLP) over HTTP
      - 16686:16686 # UI port
      - 14269:14269 # collector admin port: health check at / and metrics at /metrics
      - 9411:9411 # Zipkin compatible endpoint
    environment:
      - MEMORY_MAX_TRACES=100000
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/badger

volumes:
  jaeger_data:
